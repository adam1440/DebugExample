github.com/tccmobile/PersonF23
replit.com/@williamsmith/ClassesPt2#operater

lhs operator rhs
A      +     B
more than one way to overload
l & R both objects
object +      built in type (built in type on left only when object is built in type


how to work with cout and related things

friend: 


Static attributes
all objects share the same attributes

static methods
dont have a this pointer
only allow access to static attributes

pointers
int val = x

int*ptr = &val - & = location of

ptr - location in memory that points to a piece of data
cout << ptr - location in memory
cout << *ptr - value in memory

CPP typechecks pointers

new operator - dynamic memory allocation

int*ptrName = new int;
pointer to int = int*- name
new = allocates storage dependant on data type & returns address

difference in approaches
approach 1 - two ways to reference - directly or through pointers
approach 2 - new data type - can only be referenced through pointers

stringName = "bob";
ptr = &name;
above does not work becuase of the type mismatch

int*newPtr = new int;
*newPtr = 170 - 170 stil stuck in memory 
*newPtr = new int;
newPtr = 77;

int*newPtr = new int;
newPtr = 42;
delete newPtr;  - delete goes to allocated memory and removes the value stored there



Vectors

vector a<int> = {1,2,3,4}
cout << a.at(7)
vectors do not allow you to exceed the size

arrays must have uninterupted sections of memory
vectors must also have uninterupted secetions but can move in memory as it grows and shrinks


con
lots of overhead to move things around


small (sub 1000) - use vectors
large data sets - consider other alternatives

linked list - no contiguous memory requirement 
use for large data
con - can be difficult to implement and use
built in options with larger overhead and some issues
every node has 2 things
data, node ptr
this allows them to reference each other and find the other in memory
inefficient - add an array to index through an array - iterator


hash map - look into later

Rule of 3
Does my class have a pointer - if yes copy the constructor
destructor - ~className - delete anything new'ed in constructor
only one destructor
overloaded = operator

shallow copy - copy paste without changing location in memory
deep - copy what is pointed to
pointers should not be copy pasted, instead create a new location in memory for the copy to point to
int data
intNode *next;

copy constructor
className(const className& origObject);
const - keeps the constructor from changing the originial

when are copy constructors used
passing objects is done through copy
destroyed after it is out of scope

Memory
Code - where code is stored during a programs execution
Static - region where global variables are stored as well as static local variables
stack - function's local variables are stored during a function call. function adds local variables to the stact and return removes them
heap - free memory 

endl - \n to buffer and flush buffer
flush - inform system to buffer

Data may not be written until
buffer fills
flush is sent
object assoiated with buffer closes / goes out of scope

closing buffer connections are important 
connection may become stuck open

replit.com/@williamsmith/curlExample

curl.se

replit.com/@williamsmith/PersonF23

polymorphism
method overriding
object pointers
vitrual method (virtual table)
virtual - in front of function header - override at the end of method signature


Recursion
Function Frame
pushed to stack in memory
describes function call
  Var/parameters
  how to return


Nov 14 +: Presentaton due dates - network is my topic
try to find an example that I can run or show running on my home server
https://www.craft.me/s/66PcovnjZbu0zn
